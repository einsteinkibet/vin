# Generated by Django 5.2.3 on 2025-09-03 21:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AffiliateProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('affiliate_url', models.URLField()),
                ('merchant', models.CharField(max_length=100)),
                ('commission_rate', models.DecimalField(decimal_places=2, max_digits=4)),
                ('category', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'affiliate_products',
            },
        ),
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('meta_description', models.TextField()),
                ('published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'content_pages',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('tier', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('professional', 'Professional')], max_length=20, unique=True)),
                ('stripe_price_id', models.CharField(max_length=255)),
                ('monthly_price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('yearly_price', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('features', models.JSONField()),
                ('max_vin_checks_per_month', models.IntegerField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'subscription_plans',
            },
        ),
        migrations.CreateModel(
            name='VehicleOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('option_type', models.CharField(choices=[('standard', 'Standard Equipment'), ('optional', 'Optional Equipment'), ('package', 'Package'), ('individual', 'Individual Option'), ('dealer', 'Dealer Installed'), ('retrofit', 'Retrofit Possible')], max_length=20)),
                ('category', models.CharField(max_length=100)),
                ('msrp_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('popularity_score', models.DecimalField(decimal_places=2, default=0.5, max_digits=3)),
                ('retrofit_cost_estimate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
            ],
            options={
                'db_table': 'vehicle_options',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('premium_status', models.BooleanField(default=False)),
                ('premium_since', models.DateTimeField(blank=True, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('signup_source', models.CharField(blank=True, max_length=100, null=True)),
                ('marketing_consent', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AffiliateClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('click_date', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('converted', models.BooleanField(default=False)),
                ('conversion_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vin.affiliateproduct')),
            ],
            options={
                'db_table': 'affiliate_clicks',
            },
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('requests_per_day', models.IntegerField(default=100)),
                ('active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_keys',
            },
        ),
        migrations.CreateModel(
            name='APIRequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=200)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('response_time', models.DecimalField(decimal_places=3, max_digits=6)),
                ('status_code', models.IntegerField()),
                ('api_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vin.apikey')),
            ],
            options={
                'db_table': 'api_request_logs',
            },
        ),
        migrations.CreateModel(
            name='BMWVehicle',
            fields=[
                ('vin', models.CharField(max_length=17, primary_key=True, serialize=False, unique=True)),
                ('model', models.CharField(max_length=100)),
                ('model_year', models.IntegerField()),
                ('production_date', models.DateField(blank=True, null=True)),
                ('series', models.CharField(max_length=50)),
                ('body_type', models.CharField(max_length=50)),
                ('engine_code', models.CharField(max_length=50)),
                ('transmission_type', models.CharField(max_length=50)),
                ('drive_type', models.CharField(max_length=20)),
                ('fuel_type', models.CharField(max_length=30)),
                ('assembly_plant', models.CharField(blank=True, max_length=50, null=True)),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('horsepower', models.IntegerField(blank=True, null=True)),
                ('torque', models.IntegerField(blank=True, null=True)),
                ('top_speed', models.IntegerField(blank=True, null=True)),
                ('acceleration_0_60', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('data_source', models.CharField(default='scraper', max_length=100)),
                ('data_updated', models.DateTimeField(auto_now=True)),
                ('data_confidence', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
            ],
            options={
                'db_table': 'bmw_vehicles',
                'indexes': [models.Index(fields=['model'], name='bmw_vehicle_model_6baccd_idx'), models.Index(fields=['model_year'], name='bmw_vehicle_model_y_9ae378_idx'), models.Index(fields=['series'], name='bmw_vehicle_series_d45b74_idx'), models.Index(fields=['production_date'], name='bmw_vehicle_product_1f3143_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('past_due', 'Past Due'), ('canceled', 'Canceled'), ('incomplete', 'Incomplete'), ('incomplete_expired', 'Incomplete Expired'), ('trialing', 'Trialing'), ('unpaid', 'Unpaid')], default='incomplete', max_length=20)),
                ('current_period_start', models.DateTimeField()),
                ('current_period_end', models.DateTimeField()),
                ('cancel_at_period_end', models.BooleanField(default=False)),
                ('stripe_subscription_id', models.CharField(max_length=255, unique=True)),
                ('vin_checks_this_month', models.IntegerField(default=0)),
                ('last_reset_date', models.DateTimeField(auto_now_add=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vin.subscriptionplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='DataQualityIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_type', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('detected_date', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_date', models.DateTimeField(blank=True, null=True)),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vin.bmwvehicle')),
                ('option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vin.vehicleoption')),
            ],
            options={
                'db_table': 'data_quality_issues',
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stripe_session_id', models.CharField(max_length=255, unique=True)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('vin', models.CharField(max_length=17)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payment_transactions',
                'indexes': [models.Index(fields=['stripe_session_id'], name='payment_tra_stripe__73fc50_idx'), models.Index(fields=['user', 'created_at'], name='payment_tra_user_id_ec207b_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100)),
                ('event_type', models.CharField(choices=[('page_view', 'Page View'), ('button_click', 'Button Click'), ('form_submit', 'Form Submit'), ('error', 'Error'), ('search', 'Search')], max_length=20)),
                ('event_name', models.CharField(max_length=200)),
                ('event_data', models.JSONField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('url', models.URLField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_events',
                'indexes': [models.Index(fields=['timestamp'], name='user_events_timesta_494528_idx'), models.Index(fields=['user', 'timestamp'], name='user_events_user_id_cf6bea_idx'), models.Index(fields=['event_type', 'timestamp'], name='user_events_event_t_2c71bd_idx')],
            },
        ),
        migrations.CreateModel(
            name='OptionCompatibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_standard', models.BooleanField(default=False)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vin.bmwvehicle')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vin.vehicleoption')),
            ],
            options={
                'db_table': 'option_compatibility',
                'unique_together': {('vehicle', 'option')},
            },
        ),
        migrations.CreateModel(
            name='VINLookupHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lookup_date', models.DateTimeField(auto_now_add=True)),
                ('was_premium', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('device_type', models.CharField(blank=True, max_length=50, null=True)),
                ('viewed_premium_offer', models.BooleanField(default=False)),
                ('clicked_purchase_button', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lookups', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vin.bmwvehicle')),
            ],
            options={
                'db_table': 'vin_lookup_history',
                'indexes': [models.Index(fields=['lookup_date'], name='vin_lookup__lookup__6c623f_idx'), models.Index(fields=['user', 'lookup_date'], name='vin_lookup__user_id_44981c_idx'), models.Index(fields=['country'], name='vin_lookup__country_296df9_idx'), models.Index(fields=['device_type'], name='vin_lookup__device__ac6b4a_idx')],
            },
        ),
    ]
